FROM {{ base_image_name }}

{%- import 'macros.j2' as macros -%}
{%- if files['checksums']['.txt.asc'] -%}
{% set checksums_build_args -%}
ARG NODEJS_GPG_KEYS="94AE36675C464D64BAFA68DD7434390BDBE9B9C5 B9AE9905FFD7803F25714661B63B535A4C206CA9 56730D5401028683275BD23C23EFEFE93C4CFFFE 71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 FD3A5288F042B6850C66B31F09FE44734EB7990E C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 DD8F2338BAE7501E3DD5AC78C273792F7D83545D"
ARG NODEJS_CHECKSUMS_URL="{{ files['checksums']['.txt.asc']['url'] }}"
ARG NODEJS_CHECKSUMS="{{ files['checksums']['.txt.asc']['filename'] }}"
{%- endset %}
{% set download_checksums -%}
{{ macros.curl('${NODEJS_CHECKSUMS_URL}', '${NODEJS_CHECKSUMS}') }} && \
{%- endset %}
{% set download_and_verify_checksums -%}
{{ macros.import_gpg_key('${NODEJS_GPG_KEYS}') }} && \
{{ macros.curl('${NODEJS_CHECKSUMS_URL}', '${NODEJS_CHECKSUMS}') }} && \
{{ macros.gpg_verify('${NODEJS_CHECKSUMS}') }} && \
{%- endset %}
{%- endif -%}
{%- if files['binaries']['linux-x64']['.tar.xz'] -%}
{% set binaries_build_args -%}
ARG NODEJS_BINARIES_URL="{{ files['binaries']['linux-x64']['.tar.xz']['url'] }}"
ARG NODEJS_BINARIES="{{ files['binaries']['linux-x64']['.tar.xz']['filename'] }}"
{%- endset %}
{%- elif files['binaries']['linux-x64']['.tar.gz'] -%}
{% set binaries_build_args -%}
ARG NODEJS_BINARIES_URL="{{ files['binaries']['linux-x64']['.tar.gz']['url'] }}"
ARG NODEJS_BINARIES="{{ files['binaries']['linux-x64']['.tar.gz']['filename'] }}"
{%- endset %}
{%- elif files['source']['.tar.xz'] -%}
{% set source_build_args -%}
ARG NODEJS_SOURCE_URL="{{ files['source']['.tar.xz']['url'] }}"
ARG NODEJS_SOURCE="{{ files['source']['.tar.xz']['filename'] }}"
{% endset -%}
{%- elif files['source']['.tar.gz'] -%}
{% set source_build_args -%}
ARG NODEJS_SOURCE_URL="{{ files['source']['.tar.gz']['url'] }}"
ARG NODEJS_SOURCE="{{ files['source']['.tar.gz']['filename'] }}"
{%- endset %}
{%- endif -%}

ARG PRODUCT=nodejs
ARG PRODUCT_VERSION={{ version }}
ARG TEMP_DIR_ROOT=/tmp/${PRODUCT}
ARG TEMP_DIR=/${TEMP_DIR_ROOT}/${PRODUCT_VERSION}
ARG INSTALL_DIR_ROOT=/opt/${PRODUCT}
ARG INSTALL_DIR=${INSTALL_DIR_ROOT}/${PRODUCT_VERSION}

{% if binaries_build_args -%}
{{ binaries_build_args }}
{%- elif source_build_args -%}
{{ source_build_args }}
{%- endif %}
{% if checksums_build_args -%}
{{ checksums_build_args }}
{%- endif %}
{% if checksums_build_args -%}
{{ checksums_build_args }}
{%- endif %}

USER ${ROOT_UID}

RUN \
mkdir -p ${TEMP_DIR} ${INSTALL_DIR} && \
cd ${TEMP_DIR} && \
{% if download_checksums -%}
{{ download_checksums }}
{% if download_and_verify_checksums -%}
{{ download_and_verify_checksums }}
{%- endif %}
{%- endif %}
{% if binaries_build_args -%}
{{ macros.curl('${NODEJS_BINARIES_URL}', '${NODEJS_BINARIES}') }} && \
{% if checksums_build_args -%}
{{ macros.sha256_verify_file('${NODEJS_CHECKSUMS}','${NODEJS_BINARIES}') }} && \
{%- endif %}
{{ macros.extract_tarball('${NODEJS_BINARIES}', '${INSTALL_DIR}') }} && \
{%- elif source_build_args -%}
NODEJS_COMPILE_DEPENDENCIES="gcc gcc-c++ make zlib-devel openssl-devel readline-devel bzip2-devel xz-devel gdbm-devel tk-devel sqlite-devel" && \
yum-install ${NODEJS_COMPILE_DEPENDENCIES} && \
{{ macros.curl('${NODEJS_SOURCE_URL}', '${NODEJS_SOURCE}') }} && \
{% if checksums_build_args -%}
{{ macros.sha256_verify_file('${NODEJS_CHECKSUMS}','${NODEJS_SOURCE}') }} && \
{%- endif %}
mkdir -p ${TEMP_DIR}/build && \
{{ macros.extract_tarball('${NODEJS_SOURCE}', '${TEMP_DIR}/build') }} && \
cd ${TEMP_DIR}/build && \
./configure --prefix=${INSTALL_DIR} && \
make && \
make install && \
yum remove -y ${NODEJS_COMPILE_DEPENDENCIES} && \
yum clean all && \
{%- endif %}
cd ${INSTALL_DIR} && \
PATH=${PATH}:${INSTALL_DIR}/bin ${INSTALL_DIR}/bin/npm install npm@latest -g && \
fix-ownership ${INSTALL_DIR} && \
fix-permissions ${INSTALL_DIR} && \
rm -rf ${TEMP_DIR_ROOT}

ENV NODEJS_HOME ${INSTALL_DIR}
ENV PATH ${NODEJS_HOME}/bin:${PATH}

USER ${APP_UID}
